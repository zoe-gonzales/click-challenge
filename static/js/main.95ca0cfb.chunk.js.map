{"version":3,"sources":["components/Image/index.js","components/ImgList/index.js","components/Header/index.js","components/ImgWrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Image","props","react_default","a","createElement","src","source","alt","name","onClick","handler","ImgList","Container","list","map","item","key","id","concat","file","Header","Jumbotron","className","fluid","Row","Col","sm","currentScore","topScore","Wrapper","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","images","state","filter","image","score","clicked","setState","newArray","shuffle","copy","render","Component","App","ImgWrapper","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ivBAGe,SAASA,EAAMC,GAC1B,OAAOC,EAAAC,EAAAC,cAAA,OACHC,IAAKJ,EAAMK,OACXC,IAAKN,EAAMO,KACXC,QAASR,EAAMS,UCHR,SAASC,EAAQV,GAC5B,OACIC,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACSX,EAAMY,KAAKC,IAAI,SAAAC,GACZ,OAAOb,EAAAC,EAAAC,cAACJ,EAAD,CACHgB,IAAKD,EAAKE,GACVA,GAAIF,EAAKE,GACTT,KAAMO,EAAKP,KACXE,QAAS,kBAAMT,EAAMS,QAAQK,EAAKE,KAClCX,OAAM,YAAAY,OAAcH,EAAKI,KAAnB,+CCTf,SAASC,EAAOnB,GAC3B,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAWC,UAAU,UAAUC,OAAK,GAClCrB,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAWW,OAAK,GACdrB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACEtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAKC,GAAG,MACRxB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAKC,GAAG,MACNxB,EAAAC,EAAAC,cAAA,MAAIkB,UAAU,yBAAwBpB,EAAAC,EAAAC,cAAA,QAAMkB,UAAU,WAAhB,eAAtC,qBACApB,EAAAC,EAAAC,cAAA,KAAGkB,UAAU,oBAAb,sFAEFpB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAKC,GAAG,OAEVxB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACEtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAKC,GAAG,MACRxB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAKC,GAAG,KACNxB,EAAAC,EAAAC,cAAA,MAAIkB,UAAU,eAAd,gBAAyCpB,EAAAC,EAAAC,cAAA,QAAMkB,UAAU,iBAAiBrB,EAAM0B,gBAElFzB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAKC,GAAG,KACNxB,EAAAC,EAAAC,cAAA,MAAIkB,UAAU,eAAd,cAAuCpB,EAAAC,EAAAC,cAAA,QAAMkB,UAAU,iBAAiBrB,EAAM2B,YAEhF1B,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAKC,GAAG,+BCiCPG,cApDX,SAAAA,EAAY5B,GAAM,IAAA6B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACdC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMhC,KAQVoC,YAAc,SAAApB,GACV,IAAMqB,EAASR,EAAKS,MAAMD,OAAOE,OAAO,SAAAC,GAExC,GAAIA,EAAMxB,KAAOA,EAAI,CACjB,IAAIyB,EAAQZ,EAAKS,MAAMG,MACnBd,EAAWE,EAAKS,MAAMX,SAE1B,OAAIa,EAAME,SACNb,EAAKc,SAAS,CAAEF,MAAO,IAEnBA,EAAQd,GAAUE,EAAKc,SAAS,CAAEhB,SAAUc,IAEhDZ,EAAKS,MAAMD,OAAOxB,IAAI,SAAA2B,GAClB,OAAIA,EAAME,SACNF,EAAME,SAAU,EACTF,GACGA,IAEXA,MAEPC,EACYd,GAAUE,EAAKc,SAAS,CAAEhB,SAAUc,IAChDZ,EAAKc,SAAS,CAAEF,MAAOA,IAChBD,EAAME,SAAU,GAGxB,OAAOF,IAGRI,EAAWC,IAAQR,EAAQ,CAAES,MAAQ,IAC3CjB,EAAKc,SAAS,CAAEN,OAAQO,KAvCVf,EA0ClBkB,OAAS,WACL,OACI9C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACgB,EAAD,CAAQO,aAAcG,EAAKS,MAAMG,MAAOd,SAAUE,EAAKS,MAAMX,WAC7D1B,EAAAC,EAAAC,cAACO,EAAD,CAAME,KAAMiB,EAAKS,MAAMD,OAAQ5B,QAASoB,EAAKO,gBA5CrDP,EAAKS,MAAQ,CACTG,MAAO,GACPd,SAAU,GACVU,OAAQrC,EAAMqC,QALJR,6BADAmB,qBCGPC,MAJf,WACE,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,CAASb,OAAQA,KCONc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAAST,OAAO9C,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.95ca0cfb.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nexport default function Image(props){\n    return <img \n        src={props.source} \n        alt={props.name} \n        onClick={props.handler}/>;\n}","import React from 'react';\nimport { Container } from 'reactstrap';\nimport Image from '../Image';\n\nexport default function ImgList(props){\n    return (\n        <Container>\n                {props.list.map(item => {\n                    return <Image \n                        key={item.id} \n                        id={item.id}\n                        name={item.name}\n                        handler={() => props.handler(item.id)}\n                        source={`./images/${item.file}.jpg`}/>\n                })}\n        </Container>\n    )\n}","import React from 'react';\nimport { Jumbotron, Container, Row, Col } from 'reactstrap';\nimport './style.css';\n\nexport default function Header(props) {\n    return (\n      <div>\n        <Jumbotron className=\"heading\" fluid>\n          <Container fluid>\n            <Row>\n              <Col sm=\"1\"></Col>\n              <Col sm=\"10\">\n                <h4 className=\"display-4 text-center\"><span className=\"beatles\">The Beatles</span> click challenge!</h4>\n                <p className=\"lead text-center\">Click an album cover to start the game. To gain points, only click each one once.</p>\n              </Col>\n              <Col sm=\"1\"></Col>\n            </Row>\n            <Row>\n              <Col sm=\"4\"></Col>\n              <Col sm=\"2\">\n                <h4 className=\"text-center\">Your points: <span className=\"beatles-score\">{props.currentScore}</span></h4>\n              </Col>\n              <Col sm=\"2\">\n                <h4 className=\"text-center\">Top score: <span className=\"beatles-score\">{props.topScore}</span></h4>\n              </Col>\n              <Col sm=\"4\"></Col>\n            </Row>\n          </Container>\n        </Jumbotron>\n      </div>\n    )\n}","import React, { Component } from 'react';\nimport List from '../ImgList';\nimport Header from '../Header';\nimport shuffle from 'shuffle-array';\n\nclass Wrapper extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            score: '',\n            topScore: '',\n            images: props.images\n        }\n    }\n\n    handleClick = id => {\n        const images = this.state.images.filter(image => {\n        // identifying the image that was clicked by id\n        if (image.id === id) {\n            let score = this.state.score;\n            let topScore = this.state.topScore;\n\n            if (image.clicked) {\n                this.setState({ score: 0 });\n                // resets top score if current score surpasses it\n                if (score > topScore) this.setState({ topScore: score });\n                // mapping over array to reset clicked value to false so that user can play multiple rounds\n                this.state.images.map(image => {\n                    if (image.clicked) {\n                        image.clicked = false;\n                        return image;\n                    } else return image;\n                });\n                return image;\n            } else {\n                score++;\n                if (score > topScore) this.setState({ topScore: score });\n                this.setState({ score: score });\n                return image.clicked = true;\n            }\n\n        } else return image;\n    });\n\n        const newArray = shuffle(images, { 'copy': true });\n        this.setState({ images: newArray });\n    }\n\n    render = () => {\n        return (\n            <div>\n                <Header currentScore={this.state.score} topScore={this.state.topScore}/>\n                <List list={this.state.images} handler={this.handleClick}/>\n            </div>\n        )\n    }\n}\n\nexport default Wrapper;","import React from 'react';\nimport Wrapper from './components/ImgWrapper';\nimport images from './images.json'\n\nfunction App() {\n  return <Wrapper images={images}/>;\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}